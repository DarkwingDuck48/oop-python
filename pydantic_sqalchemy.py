from pydantic_sqlalchemy import (
    DatabaseService,
    MessageCreate,
    MessageService,
    UserCreate,
    UserService,
)


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    db_service = DatabaseService()
    user_service = UserService(db_service)
    message_service = MessageService(db_service)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    db_service.create_tables()

    print('\n' + '=' * 50)
    print('üë• –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô')
    print('=' * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        alice = user_service.create_user(UserCreate(username='alice123', email='alice@example.com'))

        bob = user_service.create_user(UserCreate(username='bob456', email='bob@example.com'))

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
        try:
            user_service.create_user(UserCreate(username='alice123', email='another@example.com'))
        except ValueError as e:
            print(f'‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}')

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
        return

    print('\n' + '=' * 50)
    print('üí¨ –°–û–ó–î–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø')
    print('=' * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_data = [
            MessageCreate(user_id=alice.id, message_text='–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?'),
            MessageCreate(user_id=alice.id, message_text='–ö—Ç–æ —Ö–æ—á–µ—Ç –ø–∏—Ü—Ü—ã? üçï'),
            MessageCreate(user_id=bob.id, message_text='–ü—Ä–∏–≤–µ—Ç, –ê–ª–∏—Å! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!'),
            MessageCreate(user_id=bob.id, message_text='–Ø –∑–∞ –ø–∏—Ü—Ü—É! üçï'),
            MessageCreate(user_id=alice.id, message_text='–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º!'),
        ]

        for msg_data in messages_data:
            message_service.create_message(msg_data)

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}')
        return

    print('\n' + '=' * 50)
    print('üìä –í–´–í–û–î–ò–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´')
    print('=' * 50)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print('\nüë• –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:')
    users = user_service.get_all_users()
    for user in users:
        print(f'  {user.id}. {user.username} ({user.email}) - —Å–æ–∑–¥–∞–Ω {user.created_at}')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print('\nüí¨ –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø:')
    messages = message_service.get_all_messages()
    for msg in messages:
        print(f'  {msg.user.username}: {msg.message_text} ({msg.created_at})')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ê–ª–∏—Å—ã
    print('\nüì® –°–û–û–ë–©–ï–ù–ò–Ø –ê–õ–ò–°–´:')
    alice_messages = message_service.get_user_messages(alice.id)
    for msg in alice_messages:
        print(f'  {msg.created_at}: {msg.message_text}')

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    stats = message_service.get_conversation_stats()
    for username, count, last_msg in stats:
        print(f'  {username}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: {last_msg}')


# --- FastAPI-–ø–æ–¥–æ–±–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ---
def demonstrate_fastapi_style():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ FastAPI"""

    db_service = DatabaseService()
    user_service = UserService(db_service)

    # –≠–º—É–ª—è—Ü–∏—è FastAPI endpoint
    def create_user_endpoint(user_data: UserCreate):
        try:
            user = user_service.create_user(user_data)
            return {
                'status': 'success',
                'data': user.model_dump(),
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            }
        except ValueError as e:
            return {'status': 'error', 'message': str(e)}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    print('\n' + '=' * 50)
    print('üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø FASTAPI –°–¢–ò–õ–Ø')
    print('=' * 50)

    result = create_user_endpoint(UserCreate(username='charlie789', email='charlie@example.com'))
    print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result}')


if __name__ == '__main__':
    main()
    demonstrate_fastapi_style()
