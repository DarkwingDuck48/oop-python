import sqlite3


def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü"""

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    conn = sqlite3.connect('messenger.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Users
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Messages
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        message_text TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE
    )
    """)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
    cursor.execute("""
    CREATE INDEX IF NOT EXISTS idx_messages_user_id 
    ON Messages (user_id)
    """)

    conn.commit()
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    return conn, cursor


def add_users(cursor):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É"""

    users = [('alice123', 'alice@example.com'), ('bob456', 'bob@example.com')]

    try:
        cursor.executemany(
            """
        INSERT INTO Users (username, email) 
        VALUES (?, ?)
        """,
            users,
        )
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    except sqlite3.IntegrityError as e:
        print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')


def add_messages(cursor):
    """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT id, username FROM Users')
    users = cursor.fetchall()

    if not users:
        print('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ!')
        return

    user_ids = {username: user_id for user_id, username in users}
    print(f'üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_ids}')

    messages = [
        (user_ids['alice123'], '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?'),
        (user_ids['alice123'], '–ö—Ç–æ —Ö–æ—á–µ—Ç –ø–∏—Ü—Ü—ã? üçï'),
        (user_ids['bob456'], '–ü—Ä–∏–≤–µ—Ç, –≠–ª–∏—Å! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!'),
        (user_ids['bob456'], '–Ø –∑–∞ –ø–∏—Ü—Ü—É! üçï'),
        (user_ids['alice123'], '–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º!'),
    ]

    cursor.executemany(
        """
    INSERT INTO Messages (user_id, message_text) 
    VALUES (?, ?)
    """,
        messages,
    )

    print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')


def display_data(cursor):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""

    print('\n' + '=' * 50)
    print('üìä –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´:')
    print('=' * 50)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print('\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:')
    cursor.execute('SELECT * FROM Users')
    users = cursor.fetchall()

    for user in users:
        print(f'ID: {user[0]}, Username: {user[1]}, Email: {user[2]}, Created: {user[3]}')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print('\nüí¨ –°–û–û–ë–©–ï–ù–ò–Ø:')
    cursor.execute("""
    SELECT m.id, u.username, m.message_text, m.created_at 
    FROM Messages m
    JOIN Users u ON m.user_id = u.id
    ORDER BY m.created_at
    """)
    messages = cursor.fetchall()

    for msg in messages:
        print(f'ID: {msg[0]}, User: {msg[1]}, Message: {msg[2]}, Time: {msg[3]}')


def demonstrate_relationships(cursor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"""

    print('\n' + '=' * 50)
    print('üîó –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–í–Ø–ó–ï–ô:')
    print('=' * 50)

    # –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:')
    cursor.execute("""
    SELECT u.username, COUNT(m.id) as message_count
    FROM Users u
    LEFT JOIN Messages m ON u.id = m.user_id
    GROUP BY u.id
    ORDER BY message_count DESC
    """)

    stats = cursor.fetchall()
    for username, count in stats:
        print(f'üë§ {username}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π')

    # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('\nüì® –°–û–û–ë–©–ï–ù–ò–Ø –ê–õ–ò–°:')
    cursor.execute("""
    SELECT m.message_text, m.created_at
    FROM Messages m
    JOIN Users u ON m.user_id = u.id
    WHERE u.username = 'alice123'
    ORDER BY m.created_at
    """)

    alice_messages = cursor.fetchall()
    for i, (text, time) in enumerate(alice_messages, 1):
        print(f'{i}. {text} ({time})')


def advanced_queries(cursor):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""

    print('\n' + '=' * 50)
    print('üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ï –ó–ê–ü–†–û–°–´:')
    print('=' * 50)

    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('\nüïí –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:')
    cursor.execute("""
    SELECT u.username, m.message_text, m.created_at
    FROM Messages m
    JOIN Users u ON m.user_id = u.id
    WHERE m.created_at = (
        SELECT MAX(created_at) 
        FROM Messages 
        WHERE user_id = u.id
    )
    """)

    last_messages = cursor.fetchall()
    for username, text, time in last_messages:
        print(f"üë§ {username}: '{text}' ({time})")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∏ —Ç–∞–±–ª–∏—Ü—ã
        conn, cursor = create_database()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        add_users(cursor)
        add_messages(cursor)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        display_data(cursor)
        demonstrate_relationships(cursor)
        advanced_queries(cursor)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

    except sqlite3.Error as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ SQLite: {e}')
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if 'conn' in locals():
            conn.close()
            print('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ')


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω–æ"""
    conn = sqlite3.connect('messenger.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    print('\nüìã –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï:')
    for table in tables:
        print(f' - {table[0]}')

    conn.close()


if __name__ == '__main__':
    main()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print('\n' + '=' * 50)
    test_database()
